<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="#">
    <link rel="stylesheet" type="text/css" href="http://getbootstrap.com/dist/css/bootstrap.min.css">

    <style type="text/css">
    @media (min-width: 768px) {
        .navbar .navbar-nav {
            display: inline-block;
            float: none;
            vertical-align: top;
        }

        .navbar .navbar-collapse {
            text-align: center;
        }
    }
        .vertical-space {
            margin-top: 8px;
        }
    </style>

    <title>Buttons</title>
</head>

<body>
<input id="upload" style="display:none;" type="file"/>
    <div class="container">
        <nav class="navbar navbar-default" role="navigation">
            <div class="container-fluid">
                <!-- Brand and toggle get grouped for better mobile display -->
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>

                </div>

                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class="collapse navbar-collapse" id="navbar-collapse">
                    <ul class="nav navbar-nav">
                        <li class="dropdown">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Components <span class="caret"></span></a>
                            <ul class="dropdown-menu" role="menu">
                                <li><a href="alarms.htm">Alarms</a></li>
                                <li><a href="relays.htm">Relays</a></li>
                                <li class="active"><a href="buttons.htm">Buttons</a></li>
                                <li><a href="motion.htm">Motion sensors</a></li>
                                <li><a href="sound.htm">Sound sensors</a></li>
                                <li><a href="modes.htm">Modes</a></li>
                            </ul>
                        </li>
                        <li><a href="configure.htm">Configure</a></li>
                        <li><a href="manage.htm">Manage</a></li>
                        <li><a href="rules.htm">Rules</a></li>

                        <li class="dropdown">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Configurations <span class="caret"></span></a>
                            <ul class="dropdown-menu" role="menu">
                                <li><a href="#" id="loadFromLocalFile">Load From Local File</a></li>
                                <li><a href="#" id="saveConfigurations">Save Config Locally</a></li>
                                <li><a href="#" id="uploadConfigurations">Upload Config To CU</a></li>
                            </ul>
                        </li>
                    </ul>
                </div>
                <!-- /.navbar-collapse -->
            </div>
            <!-- /.container-fluid -->
        </nav>

        <div class="jumbotron">
            <h2 class="text-center">Button</h2>

            <span>Name: </span>
            <input type="text" class="form-control" maxlength="30" data-bind='value:buttonNameToAdd, valueUpdate: "afterkeydown"'>
            <span>Input pin: </span>
            <input type="number" onkeypress="validatePin(event)" class="form-control" data-bind='value:buttonInputPinToAdd, valueUpdate: "afterkeydown"'>

            <div class="vertical-space text-center">
                <button type="submit" data-bind="click: addButton, enable: buttonNameToAdd().length > 0 && buttonInputPinToAdd() > 0 ">Add button</button>
            </div>

        </div>
        <!-- /jumbotron  -->

        <div data-bind="template: { name: 'buttonsTemplate', foreach: buttons }"></div>

        <script id='buttonsTemplate' type="text/html">
            <div class="jumbotron">
                <div class="btn btn-danger pull-right" data-bind="click: $root.removeButton">X</div>
                <h2 class="text-center">Button</h2>

                <span>Name: </span>
                <input type="text" class="form-control" data-bind='value:bn, valueUpdate: "afterkeydown"'>
                <span>Input pin: </span>
                <input type="number" onkeypress="validatePin(event)" class="form-control" data-bind='value: p, valueUpdate: "afterkeydown"'>
            </div>
        </script>
  </div>
    <!-- /container -->
</body>

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script type="text/javascript" src="http://knockoutjs.com/downloads/knockout-3.2.0.js"></script>
<script type="text/javascript" src="http://getbootstrap.com/dist/js/bootstrap.min.js"></script>
<script type="text/javascript" src="app.js"></script>

<script type="text/javascript">
    function viewModel() {
        self = this;
        this.buttonInputPinToAdd = numericObservable("");
        this.buttonNameToAdd = ko.observable("");
        this.buttons = ko.observableArray([]);
        this.rules = ko.observableArray([]);
 
        this.addButton = function () {
            if ((this.buttonNameToAdd() != "")) {
                var b = new button(this.buttonNameToAdd(), this.buttonInputPinToAdd(), getId());
                this.buttons.push(b);
                this.buttonNameToAdd(""); // Clear the text boxes
                this.buttonInputPinToAdd("");
                saveChanges();
            }
        };

        this.removeButton = function (button) {
            var rules = self.rules();
            if (rules != null) {
                for (var i = 0; i < rules.length; i++) {
                    if (rules[i].e.id == button.id)
                    {
                        alert("The Button is used in a rule.");
                        return;
                    }
                };
                
                self.buttons.remove(button);
                //decreaseId();

                saveChanges();
                return;
            }

            self.buttons.remove(button);
            //decreaseId();

            saveChanges();
        };
    };

    ko.applyBindings(new viewModel());

    function saveChanges() {
        saveJson(buttonsStorageName, self.buttons);
    };
</script>
</html>





